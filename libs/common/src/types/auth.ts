// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.20.3
// source: auth.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Address, User } from "./common";

export const protobufPackage = "auth";

export interface PaginationDto {
  page: number;
  skip: number;
}

export interface FindOneUserDto {
  id: number;
}

export interface Empty {
}

export interface Users {
  users: User[];
}

export interface UserAndToken {
  user: User | undefined;
  accessTokenCookie: string;
  refreshTokenCookie: string;
}

export interface ResRefreshToken {
  user: User | undefined;
  accessTokenCookie: string;
}

export interface CreateUserDto {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  address: Address | undefined;
}

export interface LoginDto {
  email: string;
  password: string;
}

export interface SocialMedia {
  twitterUri?: string | undefined;
  fbUri?: string | undefined;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface UsersServiceClient {
  createUser(request: CreateUserDto, metadata: Metadata, ...rest: any): Observable<User>;

  login(request: LoginDto, metadata: Metadata, ...rest: any): Observable<UserAndToken>;

  refreshToken(request: Empty, metadata: Metadata, ...rest: any): Observable<ResRefreshToken>;
}

export interface UsersServiceController {
  createUser(request: CreateUserDto, metadata: Metadata, ...rest: any): Promise<User> | Observable<User> | User;

  login(
    request: LoginDto,
    metadata: Metadata,
    ...rest: any
  ): Promise<UserAndToken> | Observable<UserAndToken> | UserAndToken;

  refreshToken(
    request: Empty,
    metadata: Metadata,
    ...rest: any
  ): Promise<ResRefreshToken> | Observable<ResRefreshToken> | ResRefreshToken;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "login", "refreshToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
