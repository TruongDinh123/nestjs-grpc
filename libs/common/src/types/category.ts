// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.20.3
// source: category.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Category } from "./common";

export const protobufPackage = "category";

export interface CreateCategoryRequest {
  name: string;
}

export const CATEGORY_PACKAGE_NAME = "category";

export interface CategoryServiceClient {
  createCategory(request: CreateCategoryRequest, metadata: Metadata, ...rest: any): Observable<Category>;
}

export interface CategoryServiceController {
  createCategory(
    request: CreateCategoryRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<Category> | Observable<Category> | Category;
}

export function CategoryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createCategory"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATEGORY_SERVICE_NAME = "CategoryService";
